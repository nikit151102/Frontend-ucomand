import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { environment } from '../../../../../../environment';

@Injectable({
  providedIn: 'root'
})
export class ReviewsService {



  private itemsListSubject = new BehaviorSubject<any[]>([]); // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  itemsReviews$ = this.itemsListSubject.asObservable();
  projectId: any;
  
  setItemsList(values: any[]) {
    this.itemsListSubject.next(values);
  }
  
  removeItemById(id: any) {
    const currentItems = this.itemsListSubject.getValue(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
  
    if (!Array.isArray(currentItems) || currentItems.length === 0) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
  
    const updatedItems = currentItems.filter(item => item.id !== id); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π id
    this.itemsListSubject.next(updatedItems); // –û–±–Ω–æ–≤–ª—è–µ–º Subject
  }
  
  addItemToStart(newItem: any) {
    const currentItems = this.itemsListSubject.getValue(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
  
    if (!Array.isArray(currentItems)) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
  
    const updatedItems = [newItem, ...currentItems]; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    this.itemsListSubject.next(updatedItems); // –û–±–Ω–æ–≤–ª—è–µ–º Subject
  }
  
  updateItemById(id: any, updatedData: Partial<any>) {
    const currentItems = this.itemsListSubject.getValue(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤
  
    if (!Array.isArray(currentItems) || currentItems.length === 0) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
  
    const updatedItems = currentItems.map(item => 
      item.id === id ? { ...item, ...updatedData } : item // –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç
    );
  
    this.itemsListSubject.next(updatedItems); // –û–±–Ω–æ–≤–ª—è–µ–º Subject
  }
    
  
  constructor(private http: HttpClient) { }

  // üìå –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  getComments(projectId: number, page: number = 0, size: number = 10): Observable<any> {
    return this.http.get(`${environment.apiUrl}/projects/${projectId}/comments?page=${page}&size=${size}`);
  }

  // üìå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  addComment(projectId: number, title: string, content: string): Observable<any> {
    const body = { title, content };
        const token = localStorage.getItem('authToken');
    
        const headers = new HttpHeaders({
          'Authorization': `Bearer ${token}`
        });
    return this.http.post(`${environment.apiUrl}/projects/${projectId}/comments`, body, {headers});
  }

  // üìå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  deleteComment(commentId: number): Observable<any> {
    const token = localStorage.getItem('authToken');

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
    return this.http.delete(`${environment.apiUrl}/comments/${commentId}`, {headers});
  }


  editComment(commentId: number, title: string, content: string): Observable<any> {
    const token = localStorage.getItem('authToken');
    const body = { title, content };
    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
    return this.http.put(`${environment.apiUrl}/comments/${commentId}`, body, {headers});
  }
}
